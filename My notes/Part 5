primitive variable's information is stored as the value of that variable
reference variable holds a reference to information related to that variable
reference variables are practically always objects in Java
Java has eight different primitive variables: boolean, byte, char, short, int, long, float, double
All of the variables provided by Java (other than the eight primitive variables mentioned above) are reference type. A programmer is also free to create their own variable types by defining new classes. In practice, any object instanced from a class is a reference variable.
new - calling the class' constructor
Unlike when calling a method, we refer to a field of an object, so the parentheses that indicate a method call are not written.
import java.time.LocalDate;
The equals method is implemented in such a way that it can be used to compare the current object with any other object. The method receives an Object-type object as its single parameter â€” all objects are Object-type, in addition to their own type. The equals method first compares if the addresses are equal: if so, the objects are equal. After this, we examine if the types of the objects are the same: if not, the objects are not equal. Next, the Object-type object passed as the parameter is converted to the type of the object that is being examined by using a type cast, so that the values of the object variables can be compared. Below the equality comparison has been implemented for the SimpleDate class.
if (this == compared)
if (!(compared instanceof Person))
Every class we create (and every ready-made Java class) inherits the class Object, even though it is not specially visible in the program code. This is why an instance of any class can be passed as a parameter to a method that receives an Object type variable as its parameter.
instanceof vs getClass() - for equals getClass() is better because it's more performant (instanceof checks if the object on the left is an instance of the object of the right or some subtype. getClass() returns the object's type.
you can call a constructor within a constructor with this.
valueOf vs parseInt

